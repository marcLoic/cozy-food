import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "io.spring.dependency-management" version "1.1.4"
    id "org.openapi.generator" version "7.2.0"
    id "com.github.node-gradle.node" version "7.0.2"
}

apply from: './dependencies.gradle'

version = '1.0.0-SNAPSHOT'

subprojects {

    group = 'com.dntech.cozy'

    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "java-library"
    apply plugin: "org.openapi.generator"


    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    test {
        useJUnitPlatform()
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${ver.springDepManagementVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${ver.springCloudVersion}")
        }
    }


    dependencies {
        // web
        implementation 'org.springframework.boot:spring-boot-starter-web'


        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'com.github.ben-manes.caffeine:caffeine'

        // Security
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation "com.auth0:auth0:${ver.auth0Version}"

        // Data
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation "org.jobrunr:jobrunr-spring-boot-3-starter:${ver.jobRunr}"

        implementation "org.mnode.ical4j:ical4j:${ver.ical4jVersion}"
        implementation 'org.liquibase:liquibase-core'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'org.postgresql:postgresql'

        // Utilities
        compileOnly 'org.projectlombok:lombok'
        implementation "io.vavr:vavr:${ver.vavrVersion}"
        implementation "org.mapstruct:mapstruct:${ver.mapstructVersion}"
        implementation "io.projectreactor.addons:reactor-extra:${ver.reactorAddonsVersion}"
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.mapstruct:mapstruct-processor:${ver.mapstructProcessorVersion}"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${ver.lombokMapstructBindingVersion}"

        // Generated code
        implementation 'io.swagger.core.v3:swagger-annotations:2.2.6'
        implementation 'org.openapitools:jackson-databind-nullable:0.2.4'
        implementation 'javax.validation:validation-api:2.0.1.Final'
        implementation 'javax.annotation:javax.annotation-api:1.3.2'

        // Test
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation "org.springframework.amqp:spring-rabbit-test"
        testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
        testImplementation "org.testcontainers:testcontainers:1.19.0"
        testImplementation "org.testcontainers:junit-jupiter:1.19.0"
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.testcontainers:rabbitmq'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation("org.springframework.boot:spring-boot-starter-webflux");
    }

    sourceSets {
        main {
            java {
                srcDirs 'build/generated/openapi'
            }
        }
    }

    tasks.findByName("openApiGenerate").enabled = false
    compileJava.dependsOn tasks.withType(GenerateTask)
    compileTestJava.dependsOn tasks.withType(GenerateTask)

}

/*********************************************************************************
 * Aggregate all the services OpenAPI spec files into a single spec file
 *********************************************************************************/

// Require node plugin to use the redocly node cli

node {
    download = true
    version = "18.13.0"
    nodeProxySettings = ProxySettings.OFF
    // The directory where Node.js is unpacked (when download is true)
    workDir = file("${project.projectDir}/.gradle/nodejs")
}

// Variables

def redoclyCommand = "@redocly/cli@latest"
def apiSpecDirectory = layout.projectDirectory.dir("api").asFile
def apiSpecFile = "$apiSpecDirectory.path/cozy-api-spec.yaml"

// Gradle task to crawl all openapi spec files and use redocly/cli to merge them all

task mergeServicesOasFiles(type: NpxTask) {
    def serviceDirectory = layout.projectDirectory.dir("services").asFile
    def output = layout.buildDirectory.dir("tmp/oas").get().asFile
    def filesList = aggregateServiceApiSpecFiles(serviceDirectory, output)

    def arguments = []
    arguments.push('join')
    filesList.forEach {file -> arguments.add(file)}
    arguments.add("-o")
    arguments.add(apiSpecFile)
    arguments.add("--without-x-tag-groups")
    arguments.add("true")
    command = redoclyCommand

    args = arguments
}


task printApiSpecStats(type: NpxTask) {
    dependsOn mergeServicesOasFiles
    command = redoclyCommand
    args = ['stats', apiSpecFile]
}


/**
 * This function searches through a given directory and its subdirectories
 * for files matching the pattern `*-service-api-spec.yaml` and returns a list of these files.
 *
 * @param servicesFolder The starting directory to search from.
 * @return A list of files matching the pattern.
 */
def aggregateServiceApiSpecFiles(File servicesFolder, File output) {
    def filesList = []
    servicesFolder.traverse(type: groovy.io.FileType.FILES) { file ->
        if (file.path.contains("src/main/resources") && file.name.matches(".*-service-api-spec\\.yaml")) {
            def targetFile = new File(output, file.name)

            if (!targetFile.parentFile.exists()) {
                targetFile.parentFile.mkdirs()
            }

            ant.copy(file: file, tofile: targetFile)
            filesList << targetFile.path;
        }
    }
    return filesList
}
